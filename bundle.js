(()=>{"use strict";var n={208:(n,e,t)=>{t.d(e,{A:()=>A});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([n.id,":root {\n  --error: red;\n  --skyblue: skyblue;\n  --skyblue-shadow: rgb(76, 118, 134);\n  --white: white;\n  --white-hover: rgb(243, 243, 243);\n  --info-bg: rgba(37, 37, 63, 0.2);\n  font-family: Arial, Helvetica, sans-serif;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 0;\n  margin: 0;\n  background-color: var(--skyblue);\n  color: var(--white);\n  height: 100vh;\n  gap: 32px;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n  color: var(--white);\n  background-color: var(--info-bg);\n  box-shadow: 2px 2px 5px var(--skyblue-shadow);\n  border-radius: 16px;\n  padding: 32px;\n  gap: 4px;\n}\n\n.search-container {\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n}\n\ninput,\ninput:active {\n  padding: 8px 16px;\n  border-radius: 8px;\n  color: var(--white);\n  font-size: 12pt;\n  background-color: transparent;\n  border: 1px solid var(--white);\n  outline: none;\n  min-width: 320px;\n}\n\ninput::placeholder {\n  color: var(--white);\n}\n\nbutton {\n  padding: 8px 16px;\n  border-radius: 8px;\n  font-size: 12pt;\n  background-color: var(--white);\n  color: var(--skyblue-shadow);\n  border: none;\n}\n\nbutton:hover {\n  background-color: var(--white-hover);\n}\n\n.error {\n  color: var(--white);\n  font-size: 10pt;\n  margin-left: 4px;\n}\n\n.container {\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 32px;\n  width: fit-content;\n  min-width: 240px;\n  border-radius: 16px;\n  background-color: var(--info-bg);\n  gap: 16px;\n  box-shadow: 2px 2px 5px var(--skyblue-shadow);\n}\n\nh1 {\n  padding: 0;\n  margin: 0;\n  font-size: 24pt;\n  font-weight: 500;\n}\n\n.degree {\n  font-size: 18pt;\n  margin-left: 4px;\n  vertical-align: top;\n}\n\n.temp {\n  font-size: 60pt;\n}\n\n.condition {\n  font-size: 14pt;\n}\n\n.info {\n  display: none;\n  grid-template-rows: repeat(6, 1fr);\n  grid-template-columns: repeat(2, 1fr);\n  gap: 4px;\n  width: fit-content;\n  height: fit-content;\n  min-width: 576px;\n  padding: 32px;\n  border-radius: 16px;\n  background-color: var(--info-bg);\n  font-size: 12pt;\n  box-shadow: 2px 2px 5px var(--skyblue-shadow);\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,kBAAkB;EAClB,mCAAmC;EACnC,cAAc;EACd,iCAAiC;EACjC,gCAAgC;EAChC,yCAAyC;AAC3C;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,UAAU;EACV,SAAS;EACT,gCAAgC;EAChC,mBAAmB;EACnB,aAAa;EACb,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,gCAAgC;EAChC,6CAA6C;EAC7C,mBAAmB;EACnB,aAAa;EACb,QAAQ;AACV;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,QAAQ;AACV;;AAEA;;EAEE,iBAAiB;EACjB,kBAAkB;EAClB,mBAAmB;EACnB,eAAe;EACf,6BAA6B;EAC7B,8BAA8B;EAC9B,aAAa;EACb,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,eAAe;EACf,8BAA8B;EAC9B,4BAA4B;EAC5B,YAAY;AACd;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,mBAAmB;EACnB,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;EACb,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,gCAAgC;EAChC,SAAS;EACT,6CAA6C;AAC/C;;AAEA;EACE,UAAU;EACV,SAAS;EACT,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,kCAAkC;EAClC,qCAAqC;EACrC,QAAQ;EACR,kBAAkB;EAClB,mBAAmB;EACnB,gBAAgB;EAChB,aAAa;EACb,mBAAmB;EACnB,gCAAgC;EAChC,eAAe;EACf,6CAA6C;AAC/C",sourcesContent:[":root {\n  --error: red;\n  --skyblue: skyblue;\n  --skyblue-shadow: rgb(76, 118, 134);\n  --white: white;\n  --white-hover: rgb(243, 243, 243);\n  --info-bg: rgba(37, 37, 63, 0.2);\n  font-family: Arial, Helvetica, sans-serif;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 0;\n  margin: 0;\n  background-color: var(--skyblue);\n  color: var(--white);\n  height: 100vh;\n  gap: 32px;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n  color: var(--white);\n  background-color: var(--info-bg);\n  box-shadow: 2px 2px 5px var(--skyblue-shadow);\n  border-radius: 16px;\n  padding: 32px;\n  gap: 4px;\n}\n\n.search-container {\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n}\n\ninput,\ninput:active {\n  padding: 8px 16px;\n  border-radius: 8px;\n  color: var(--white);\n  font-size: 12pt;\n  background-color: transparent;\n  border: 1px solid var(--white);\n  outline: none;\n  min-width: 320px;\n}\n\ninput::placeholder {\n  color: var(--white);\n}\n\nbutton {\n  padding: 8px 16px;\n  border-radius: 8px;\n  font-size: 12pt;\n  background-color: var(--white);\n  color: var(--skyblue-shadow);\n  border: none;\n}\n\nbutton:hover {\n  background-color: var(--white-hover);\n}\n\n.error {\n  color: var(--white);\n  font-size: 10pt;\n  margin-left: 4px;\n}\n\n.container {\n  display: none;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 32px;\n  width: fit-content;\n  min-width: 240px;\n  border-radius: 16px;\n  background-color: var(--info-bg);\n  gap: 16px;\n  box-shadow: 2px 2px 5px var(--skyblue-shadow);\n}\n\nh1 {\n  padding: 0;\n  margin: 0;\n  font-size: 24pt;\n  font-weight: 500;\n}\n\n.degree {\n  font-size: 18pt;\n  margin-left: 4px;\n  vertical-align: top;\n}\n\n.temp {\n  font-size: 60pt;\n}\n\n.condition {\n  font-size: 14pt;\n}\n\n.info {\n  display: none;\n  grid-template-rows: repeat(6, 1fr);\n  grid-template-columns: repeat(2, 1fr);\n  gap: 4px;\n  width: fit-content;\n  height: fit-content;\n  min-width: 576px;\n  padding: 32px;\n  border-radius: 16px;\n  background-color: var(--info-bg);\n  font-size: 12pt;\n  box-shadow: 2px 2px 5px var(--skyblue-shadow);\n}\n"],sourceRoot:""}]);const A=i},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var A=0;A<this.length;A++){var c=this[A][0];null!=c&&(i[c]=!0)}for(var s=0;s<n.length;s++){var d=[].concat(n[s]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],A=0;A<n.length;A++){var c=n[A],s=o.base?c[0]+o.base:c[0],d=a[s]||0,p="".concat(s," ").concat(d);a[s]=d+1;var l=t(p),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==l)e[l].references++,e[l].updater(u);else{var C=r(u,o);o.byIndex=A,e.splice(A,0,{identifier:p,updater:C,references:1})}i.push(p)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var A=t(a[i]);e[A].references--}for(var c=o(n,r),s=0;s<a.length;s++){var d=t(a[s]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},659:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{const n=function(){const n=document.querySelector(".error");return{set:e=>n.textContent=e,clear:()=>n.textContent=""}}();class e{constructor(n){this.location={city:n.location.name,region:n.location.region,country:n.location.country,time:n.location.localtime},this.weather={condition:n.current.condition.text,tempF:Math.floor(n.current.temp_f),tempC:Math.floor(n.current.temp_c),humidity:n.current.humidity,lastUpdated:n.current.last_updated}}}var o=t(72),r=t.n(o),a=t(825),i=t.n(a),A=t(659),c=t.n(A),s=t(56),d=t.n(s),p=t(540),l=t.n(p),u=t(113),C=t.n(u),f=t(208),m={};m.styleTagTransform=C(),m.setAttributes=d(),m.insert=c().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=l(),r()(f.A,m),f.A&&f.A.locals&&f.A.locals;const h=document.querySelector("form"),g=document.querySelector("#search");h.addEventListener("submit",(async t=>{if(t.preventDefault(),g.value){const t=await async function(t){try{n.set("Searching...");const o=await fetch(`https://api.weatherapi.com/v1/current.json?key=d7c1713ad5724af9a37173303241905&q=${t}`,{mode:"cors"});n.clear();const r=await o.json();return new e(r)}catch(e){n.set("No location found")}}(g.value);null!=t&&(function(n){const e=document.querySelector(".container"),t=document.querySelector(".info"),o=document.querySelector("h1"),r=document.querySelector(".temp"),a=document.querySelector(".condition"),i=document.querySelector("#location"),A=document.querySelector("#time"),c=document.querySelector("#tempC"),s=document.querySelector("#tempF"),d=document.querySelector("#humidity"),p=document.querySelector("#last-updated");o.textContent=n.location.city,r.textContent=n.weather.tempF;const l=document.createElement("span");l.classList.add("degree"),l.textContent="°F",r.appendChild(l),a.textContent=n.weather.condition,i.textContent=`${n.location.city}, ${n.location.region}, ${n.location.country}`,A.textContent=n.location.time,c.textContent=`${n.weather.tempC}°C`,s.textContent=`${n.weather.tempF}°F`,d.textContent=`${n.weather.humidity}%`,p.textContent=n.weather.lastUpdated,e.style.cssText="display: flex;",t.style.cssText="display: grid;"}(t),h.reset(),n.clear())}else n.set("Please enter valid search")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,